import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Main {
    public static void main(String[] args) {

        int[] a = {1,3,6,5,9,8};
        System.out.println(isMinHeap(a));
        int[] arr = {0,0,0,0,0,0};
        //System.out.println(fibonacci_memoized(5,arr));
        int[] weights = {1,1,3,4,5};
        int[] profits = {3,4,6,2,6};
        int W = 8;
        //System.out.println(FractionKnapsack(weights,profits,W));
        int[] bills = {5,10,5,20};
        System.out.println(lemonadeChange(bills));

    }

    public static boolean isMinHeap(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if ((2 * i) < arr.length) {
                if (arr[2 * i] < arr[i])
                    return false;

                if ((2 * i + 1) < arr.length) {
                    if (arr[2 * i + 1] < arr[i])
                        return false;
                }
            }
        }
        return true;
    }


    public static void convertToMin(int[] arr, int index){
        int theoMaxInd = arr.length;
        if(index < arr.length && arr[index] > arr[theoMaxInd]){
            int temp = arr[index];
            arr[index] = arr[theoMaxInd];
            arr[theoMaxInd] = temp;
        }

    }


    public static Set<Character> intersect(String str1, String str2 ){
        Set<Character> str1Set = new HashSet<Character>();
        char[] c1 = str1.toCharArray();
        for(int i = 0; i< c1.length; i++){
            str1Set.add(c1[i]);
        }
        char[] c2 = str2.toCharArray();
        Set<Character> res = new HashSet<Character>();
        for(int i = 0; i< c2.length; i++){
            if (str1Set.contains(c2[i]))
                    res.add(c2[i]);
        }
        return res;
    }
    public static void anagram(String... args){
        for(int i = 0; i< args.length;i++){
            HashSet<String> set = new HashSet<>();
            set.add(args[i]);
            HashSet<Character> h = new HashSet<>();
            char[] carr = args[i].toCharArray();
            for(char c : carr)
                h.add(c);
            for(int j = i; j < args.length;j++){
                Set<Character> res = intersect(args[i], args[j]);
                if(res.size() == h.size())
                    set.add(args[j]);
            }
            //System.out.println(set);
        }

            }

    public static int fibonacci_memoized(int n, int[] arr){
        if(arr[n] != 0){
            return arr[n];
        }
        if(n == 0){
            arr[0] = 1;
            return arr[0];
        };
        if(n == 1){
            arr[1] = 1;
            return arr[1];
        };
        //System.out.println(n);

        arr[n] = fibonacci_memoized(n-1,arr) + fibonacci_memoized(n-2,arr);
        return arr[n];
    }

    public static int[] binaryOnes(int n, int[] arr){
        if (arr[n] > 0)
            return arr;
        if(n == 0) {
            arr[0] = 0;
            return arr;
        }

        if((n & (n+1)) == 0) {
            arr[n] = (n ^ (n-1)) + 1;
        }



        return arr;
    }


    public static String LCS(String S1, String S2) {
        int m = S1.length();
        int n = S2.length();
        int[][] table = new int[m + 1][n + 1];
        for (int i = 0; i< m+1; i++){
            for(int j = 0; j < n+1; j++){
                if(i == 0 || j == 0)
                    table[i][j] = 0;
                else if(S1.charAt(i) == S2.charAt(j))
                    table[i][j] = table[i-1][j-1] + 1;
                else
                    table[i][j] = Math.max(table[i-1][j],table[i][j-1]);
                }

            }

        String res = "";
        for(int i = 0; i< m; i++){
            for(int j = 0; j<n;j++){
                if(table[i][j] - table[i-1][j-1] == 1) {
                    if (S1.charAt(i) == S2.charAt(j))
                        res = res + S1.charAt(i);
                }

            }        }
        return res;
        }

    public static void bubbleSort(int weights[],int[] profits )
    {
        int n = weights.length;
        for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (profits[j]/weights[j] < profits[j]/weights[j + 1]) {
                    int temp = weights[j];
                    weights[j] = weights[j + 1];
                    weights[j + 1] = temp;

                    int temp1 = profits[j];
                    profits[j] = profits[j+1];
                    profits[j+1] = temp1;
                }
    }

    public static int FractionKnapsack(int[] weights, int[] profits, int W){
        int Profit = 0;
        bubbleSort(weights,profits);


        for(int i = 0; i< weights.length;i++){
            if(W == 0)
                break;
            if(weights[i] >= W) {
                Profit = Profit + profits[i];
                W = W - weights[i];
            }
            else if(weights[i] < W ){
                int frac = W/weights[i];
                Profit = Profit + frac * profits[i];
                break;
            }
        }
        return Profit;
        }
    public static int countOccurrences(char arr[], char x)
    {
        int res = 0;
        for (int i=0; i<arr.length; i++)
            if (x == arr[i])
                res++;
        return res;
    }
//        public static int[] occurCount(String S){
//        char[] chars = S.toCharArray();
//        Set<Character> charSet = new HashSet<Character>();
//        for (int i = 0; i < chars.length; i ++)
//            charSet.add(chars[i]);
//        int[] freqs = new int[charSet.size()];
//        int i = 0;
//        for(char c : charSet){
//            freqs[++i] = countOccurrences(chars, c);
//        }
//        return freqs;
//        }
//        public static int longestPalindrome(String S){
//
//        }


public static boolean lemonadeChange(int[] bills) {
    for(int i = 1; i < bills.length; i++){
        bubbleSort(bills,i);
        for(int j = 0; j < i; j++){
            if(bills[i] > 5 && bills[j] != 0 && bills[j] <= bills[i]){
                bills[i] = bills[i] - bills[j];
                bills[j] = 0;
            }



        }
        if(bills[i] > 5 ) {
            System.out.println(bills[i] + " " + i);
            return false;
        }

    }
    return true;
}

    public static void bubbleSort(int changes[], int n)
    {
        for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (changes[j] < changes[j + 1]) {
                    int temp = changes[j];
                    changes[j] = changes[j + 1];
                    changes[j + 1] = temp;

                }
    }

    }







